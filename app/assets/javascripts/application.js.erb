// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or any plugin's vendor/assets/javascripts directory can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// Read Sprockets README (https://github.com/sstephenson/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require jquery
//= require jquery-ui
//= require jquery.turbolinks
//= require jquery_ujs
//
//= require twitter/bootstrap
//
//= require turbolinks
//= require_tree .


// FUNCTION FOR SMOOTH SCROLLING
$(function() {
  // CHECK IF LINK
  $('a[href*=#]:not([href=#])').click(function() {
    if (location.pathname.replace(/^\//,'') == this.pathname.replace(/^\//,'') && location.hostname == this.hostname) {
      var target = $(this.hash);
      target = target.length ? target : $('[name=' + this.hash.slice(1) +']');
      if (target.length) {
        $('html,body').animate({
          scrollTop: target.offset().top
        }, 1000);
        console.log("Success");
        return false;
      }
    }
  });
});

// JAVASCRIPT FOR SLICING IMAGE
// http://stackoverflow.com/questions/27065230/how-to-split-up-an-image-in-pieces-and-reshuffle-it-using-html-javascript-or-c
$(document).ready(function(){
  var canvas=document.getElementById("canvas");
  var ctx=canvas.getContext("2d");
  var cw=canvas.width;
  var ch=canvas.height;

  // ROWS * COL = NUMBER STUDENTS IN CLASS
  var numberStudents = 82;
  var grid = calculate_grid(numberStudents);
  var rows= grid[0];
  var cols= grid[1];

  var img= new Image();
  img.onload=start;
  img.src= "<%= asset_path('howdy.jpg') %>";
  
  function start(){
    var iw=canvas.width=img.width;
    var ih=canvas.height=img.height;
    var pieceWidth=iw/cols;
    var pieceHeight=ih/rows;

    var pieces = createGridArray(rows, cols);
    
    shuffle(pieces);

    // Draw each piece on canvas
    var i=0;
    for(var y=0;y<rows;y++){ // Iterate through each row
      for(var x=0;x<cols;x++){ // Iterate through each col
        var p=pieces[i++];
        ctx.drawImage(
          // from the original image
          img,
          // take the next x,y piece
          x*pieceWidth, y*pieceHeight, pieceWidth, pieceHeight,
          // draw it on canvas based on the shuffled pieces[] array
          p.col*pieceWidth, p.row*pieceHeight, pieceWidth, pieceHeight
        );
      }
    }
  }
});

function createGridArray(rows, cols){
  var pieces = [];
  // HAS TO BE IN THIS ORDER!: CANVAS DRAWS THIS WAY
  for(rowN = 0; rowN < rows; ++rowN){
    for(colN = 0; colN < cols; ++colN){
      pieces.push({col:colN,row:rowN});
    }
  }
  return pieces;
};

function calculate_grid(studetns){
  var maximum_students = 1000
  var numberSquares = 0
  // THE PURPOSE OF THIS IS TO MAKE A SQUARE, WE WANT ROWS AND COLS TO BE THE SAME NUMBER 
  // FOR 100 STUDENTS THIS WILL RETURN 10, FOR 99 STUDENTS ALSO 10, BUT FOR 81 IT RETURNS 9
  for (; (numberSquares*numberSquares) < (maximum_students); ++numberSquares) { 
    if ((numberSquares * numberSquares) >= studetns){
      break
    }
  }
  var rows = numberSquares;
  var cols = numberSquares;
  return [rows, cols];
};

function shuffle(pieces){
  for(var j, x, i = pieces.length; i; j = Math.floor(Math.random() * i), x = pieces[--i], pieces[i] = pieces[j], pieces[j] = x);
  return pieces;
};